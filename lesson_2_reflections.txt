What happens when you initialize a repository? Why do you need to do it?

A .git folder is created and it stores all metadata.


How is the staging area different from the working directory and the repository? What value do you think it offers?

The stagin area is where there are the files that will be commited. The repository has files that could be commited (previous adding to the staging area or not - foo files -) and the repository has the commited files - at least one commit - .


How can you use the staging area to make sure you have one commit per logical change?

You can add only from workspace the files involved with one logical change and once committed add the other changes.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

When you have different environments of testing and deployment is useful to have different branches. One for Testing, one for User Testing, one for Pre..


How do the diagrams help you visualize the branch structure?

You can see which functionality is in every branch and if it will require merging.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result is that we have the changes made in both branches united. We represent as one branch returns to the flow because once merge is done we only have
one "code stream".


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

IT saves you time when the lines to merge are obvious which ones can be merged.